{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","cats","type","value","onChange","target","onFocus","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","props","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,4BAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAsB5C,OACI,0BAAMC,SAfS,SAACC,GAChBA,EAAEC,iBACFC,QAAQC,IAAI,gBAETN,EAAWO,OAAOC,OAAO,IACxBV,GAAc,SAACW,GAAD,OAAST,GAAT,mBAAuBS,OACrCR,EAAc,OAUd,4CACA,2BACIS,KAAK,OACLC,MAAOX,EACPY,SAxBa,SAACT,GACtBF,EAAcE,EAAEU,OAAOF,QAwBfG,QAXM,SAACX,GACfF,EAAc,S,uBCtBTc,EAAO,uCAAE,WAAMC,GAAN,uBAAAC,EAAA,6DACZC,EADY,0FAC4EC,UAAUH,GADtF,+BAEAI,MAAMF,GAFN,cAEZG,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QATvB,kBAaXM,GAbW,4CAAF,sDCEPO,EAAc,SAACC,GAIxB,OAFA3B,QAAQC,IAAI0B,GAGR,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAMd,IAAKiB,IAAKH,EAAMJ,QAChC,2BAAII,EAAMJ,SCLTQ,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECDb,SAACA,GAAY,IAAD,EACRjB,mBAAS,CAC/BwB,KAAK,GACLc,SAAQ,IAHsB,mBAC3BC,EAD2B,KACpBC,EADoB,KAgBlC,OAVAC,qBAAW,WACPzB,EAAQC,GACHyB,MAAK,SAAAC,GACFH,EAAS,CACLhB,KAAKmB,EACLL,SAAQ,SAGtB,CAACrB,IAEIsB,EDZuBK,CAAa3B,GAA/Ba,EAHuB,EAG5BN,KAAYc,EAHgB,EAGhBA,QAInB,OAFAhC,QAAQC,IAAI+B,GAGR,oCACI,4BAAKrB,GACJqB,GAAW,0CAEX,yBAAKJ,UAAU,aAGRJ,EAAOJ,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,eACAkB,IAAKlB,EAAIC,IACLD,UElBfmB,EAAe,WAAM,MAGM9C,mBAAS,CAAC,cAHhB,mBAGvB+C,EAHuB,KAGXhD,EAHW,KAU9B,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACJ,4BAEQgD,EAAWrB,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CACGA,SAAUA,EACV4B,IAAK5B,UCjBzB+B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.1e47d7ae.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('Agregue una categorÃ­a');\n\n    const handleInputChange= (e)=>{\n        setInputValue(e.target.value);        \n    }\n\n    const handleSubmit=(e)=>{\n        e.preventDefault();\n        console.log('Submit hecho');\n\n        if(inputValue.trim().length>2){\n            setCategories((cats)=>[inputValue,...cats]);\n            setInputValue('');\n        }\n    }\n\n    const handleFocus=(e)=>{\n        setInputValue('');\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <h2>Add Category</h2>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n                onFocus={handleFocus}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes={\n    setCategories:PropTypes.func.isRequired \n}\n","export const getGifs= async(category)=>{\n    const url =`https://api.giphy.com/v1/gifs/search?api_key=s1m2CcH9qXKItVHBKg64NIu2Smy3W3ok&q=${encodeURI(category)}&limit=15&rating=R`;\n    const resp =await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img =>{\n        return {\n            id:img.id,\n            title:img.title,\n            url:img.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n    \n};","import React from 'react'\n\nexport const GifGridItem = (props) => {\n\n    console.log(props);\n    \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={props.url} alt={props.title}/>\n            <p>{props.title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n\n    const {data:images,loading} = useFetchGifs(category);\n\n    console.log(loading);\n    \n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p>Cargando...</p>}\n            {\n             <div className=\"card-grid\">\n\n                {\n                    images.map((img) =>\n                        <GifGridItem \n                        key={img.id}\n                        {...img}/>\n                    )\n                }\n                    \n            </div> \n            }\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\";\nimport  { getGifs } from '../helpers/getGif'\n\nexport const useFetchGifs=(category)=>{\n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    });\n\n    useEffect( ()=>{\n        getGifs(category)\n            .then(imgs =>{\n                setState({\n                    data:imgs,\n                    loading:false\n                });\n            });\n    },[category])\n\n    return state;\n}","import React,{useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    // const categories=['One Punch','Samurai X','Dragon Ball'];\n    const [categories, setCategories] = useState(['One Punch'])\n    \n    /*const handleAdd=()=>{\n        setCategories([...categories, 'HunterXHunter']);\n    }\n    */\n\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/> \n        <ol>\n            {\n                categories.map((category)=>\n                 <GifGrid \n                    category={category}\n                    key={category}/>\n                )\n            }\n        </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n//s1m2CcH9qXKItVHBKg64NIu2Smy3W3ok\n\nReactDOM.render(\n    <GifExpertApp />, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}